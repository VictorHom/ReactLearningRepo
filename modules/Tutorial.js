import React from 'react';

let data = [
	{id : 1, author : "Pete Hunt", text : "This is one comment" },
	{id : 2, author : 'Jordan Walke', text : "This is *another* comments" }
];

let url = "comments.json";
let pollInterval = 2000;

// unsure how to pass data through react-router
// where getInitialState is run once to set initial state of componenet
// componentDidMount - is called automatically by React after a compnent is rendered for the first time
// the key to dynamic update is to call this.setState()
export default React.createClass({
	loadCommentsFromServer : function() {
		$.ajax({
			url : url,
			dataType : 'json',
			cache : false,
			success : function(data) {
				this.setState({data : data });
			}.bind(this),
			error : function(xhr, status, err) {
				console.error(status, err.toString);
			}.bind(this)
		})
	},
	handleCommentSubmit : function(comment) {
		//now you have data showing on the front for this client
		var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});
		// TODO: submit to the server and refresh the list
		$.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
      	this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });

	},
	//get initial state runs exactly once to set up the initial state of component
	getInitialState : function() {
		return {data : []};
	},
	componentDidMount : function() {
		this.loadCommentsFromServer();
		setInterval(this.loadCommentsFromServer, pollInterval);
	},
	render : function() {
		return (
			<div className="commentBox">
				<h1>Comments</h1>
				<CommentList  data={this.state.data} />
				<CommentForm onCommentSubmit ={this.handleCommentSubmit}/>
			</div>
		);
	}
});



let CommentForm = React.createClass({
	getInitialState : function() {
		return {author : '', text : ''}
	},
	handleAuthorChange : function(e) {
		this.setState({ author : e.target.value });
	},
	handleTextChange : function(e) {
		this.setState({ text : e.target.value });
	},
	handleSubmit : function(e) {
		e.preventDefault();
		var author = author.this.state.author.trim();
		var text = this.state.text.trim();
		if (author || text) {
			return;
		}
		this.props.onCommentSubmit({author : author, text: text });
		this.setState({ author : '', text : '' });
	},
	render : function(){
		return (
			<form className="commentForm" onSubmit={this.handleSubmit}>
				<input 
					type="text" 
					placeholder="Your name" 
					value = {this.state.author } 
					onChange = {this.handleAuthorChange}
				/>
				<input 
					type="text" 
					placeholder="Say something..." 
					value={this.state.text} 
					onChange = {this.handleTextChange}
				/>
				<input type="submit" value="Post" />
			</form>
		);
	}
});

let CommentList = React.createClass({
	render : function() {
		
		var commentNodes = this.props.data.map(function(comment) {
			return (
				<Comment author = {comment.author} key={comment.id}>
					{comment.text}
				</Comment>
			);
		});
		return (
			<div className="commentList">
				{commentNodes}
			</div>
		)
		//return  (
		// 	<div className="commentList">
		// 		<Comment author="Pete Hunt">This is one comment</Comment>
		// 		<Comment author="Jordan Walke">This is another comment</Comment>
		// 	</div>
		// );
	}
});

var Comment = React.createClass({
	rawMarkup : function() {
		var rawMarkup = marked(this.props.children.toString(), {sanitize : true});
		return { __html : rawMarkup }
	},
  render : function() {
    return (
      <div className="comment">
        <h2 className="commentAuthor">
          {this.props.author}
        </h2>
        <span dangerouslySetInnerHTML={this.rawMarkup()} />
      </div>
    );
  }
});
